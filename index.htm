<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>1-bit Binary Pattern Generator v1.32</title>
    <link rel="stylesheet" href="css/style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>

    <!-- 1BIT SHADER FUNCTIONS -->
    <script src="js/functions.js"> </script>
    <script src="js/1bit-pattern.js"> </script>

    <div class="sidebar-left">
        <div class="title">Pattern Controls</div>
        <div class="control-group">
            <label for="param1">param1 (-99 - 99):</label>
            <input type="range" id="param1" min="-99" max="99" value="11">
        </div>
        <div class="control-group">
            <label for="param2">param2 (-99 - 99):</label>
            <input type="range" id="param2" min="-99" max="99" value="15">
        </div>
        <div class="control-group">
            <label for="param3">param3 (2-99):</label>
            <input type="range" id="param3" min="2" max="99" value="3">
        </div>
        <div class="control-group">
            <label for="modfun">function modifier (1-3):</label>
            <input type="range" id="modfun" min="1" max="3" value="2">
        </div>
        <div class="control-group">
            <label for="function-code">Pattern Function:</label>
            <textarea id="function-code" rows="12" style="width: 94%; ">function f(x, y, param1, param2, param3) {
    if (x === 0) return 0;
        
    return ((~((y * param1) % (x + y))) ^ (((1 ^ y) ^ (-y)) - (~(y / param2)))) % param3;
}
            </textarea>
        </div>

        <div class="button-group" style="width: 102%; ">
            <button id="invert-btn" class="glass-button" title="black/white invert"><i class="fa-solid fa-square"></i></button>
            <button id="integer-btn" class="glass-button" title="proper 1-bit output"><i class="fa-solid fa-wave-square"></i></button>
            <button id="dithering-btn" class="glass-button" title="switch bayesian dithering"><i class="fa-solid fa-border-none"></i></button>
            <button id="floydstein-btn" class="glass-button" title="switch Floyd-Steinberg dithering"><i class="fa-solid fa-border-none"></i></button>
            <button id="color-btn" class="glass-button" title="color gradients; not implemented yet"><i class="fa-solid fa-droplet"></i></button>
        </div>

        <br />

        <div class="button-group" style="width: 100%; ">
            <button id="rndfn-btn" class="glass-button" title="plot random function"><b><i class="fa-solid fa-dice"></i><br />fn</b></button>
            <button id="omoshiroi-btn" class="glass-button" title="interesting functions ('Raku, 楽')"><i class="fa-solid fa-dice"><br />楽</i></button>
            <button id="grayscale-btn" class="glass-button" title="grayscale functions ('Nezumi, 鼠')"><i class="fa-solid fa-dice"><br />鼠</i></button>
            <button id="rndfn-val" class="glass-button-wide" title="set random param values"><b><i class="fa-solid fa-shuffle"></i><br />par</b></button>
            <button id="update-btn" class="glass-button" title="update plotting"><i class="fa-solid fa-rotate-right"></i></button>
        </div>

    </div>

    <div class="main-content">
        <canvas id="canvas" width="768" height="768"></canvas>
    </div>

    <div class="sidebar">
        <a href="https://github.com/masayume/1bit-pattern-gen/"><h2>Binary Pattern Generator</h2></a>
        by <a href="https://masayume.it">masayume</a>, ver. <b>1.32</b>, 
        <p id="par1">
        total functions available: 
        </p>
        <script>
            par1.textContent += (functions.length);
        </script>
        </p>
        <p id="par2">
        楽 total raku functions: 
        </p>
        <script>
            rakufuncts = functions.filter(str => str.endsWith('楽'));
            par2.textContent += (rakufuncts.length + 1);
        </script>
        </b>

        <p id="par3">
        鼠 total grayscale functions: 
        </p>
        <script>
            grayfuncts = functions.filter(str => str.endsWith('鼠'));
            par3.textContent += (grayfuncts.length + 1);
        </script>

        <p>
            From  <a href="https://freeradical.zone/@bitartbot">bitartbot</a>, a bot which produces procedural art 
            by plotting an integer function taking the current coordinates and producing an integer result. 
            The function is procedurally created using random numbers and appears in the status text.
        </p>
        <p>
            Coordinates are coloured either by where the value appears within the range of results 
            (the "gradient" scheme) or simply by whether it is the most common result (white) or not (black) 
            (the "onebit" scheme.)
        </p>
        <p>
            <a href="https://patternchecker.com/" target="_blank">Pattern checker tool</a>
        </p>
        </p>
        <div class="button-group">
            <button id="save-btn" class="glass-button" title="save image"><b><i class="fa-solid fa-floppy-disk"></i> Image</b></button>
            <button id="save4x-btn" class="glass-button" title="save mirrored image"><b><i class="fa-solid fa-floppy-disk"></i> Mirrored</b></button>
        </div>
        <br />
        <div class="button-group">
            <button id="grid-btn" class="button" title="show grid"><b><i class="fa-solid fa-border-none"></i> show grid</b></button>
            <button id="rotate90-btn" class="glass-button" title="rotate 90° clockwise"><b><i class="fa-solid fa-rotate-left"></i> Rotate CCW</b></button>
        </div>

    </div>    

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const scale = 3;
        const baseSize = 256;

        let   invert = 0;
        let   tointeger = 0;
        let   beyerDithering = 0;
        let   floydsteinDithering = 0;

        const bufferCanvas = document.createElement('canvas');
        bufferCanvas.width = baseSize;
        bufferCanvas.height = baseSize;
        const bufferCtx = bufferCanvas.getContext('2d');
        const imageData = bufferCtx.createImageData(baseSize, baseSize);

        const param1Input = document.getElementById('param1');
        const param2Input = document.getElementById('param2');
        const param3Input = document.getElementById('param3');
        const modfunInput = document.getElementById('modfun');
        const invertInput = document.getElementById('invert-btn');
        const integerInput = document.getElementById('integer-btn');
        const ditheringInput = document.getElementById('dithering-btn'); 
        const floydsteinInput = document.getElementById('floydstein-btn');         
        const functionCode = document.getElementById('function-code');
        const updateBtn = document.getElementById('update-btn');
        const omoshiroiBtn = document.getElementById('omoshiroi-btn');
        const grayscaleBtn = document.getElementById('grayscale-btn');
        const saveBtn = document.getElementById('save-btn');
        const save4xBtn = document.getElementById('save4x-btn');
        const rotate90Btn = document.getElementById('rotate90-btn');
        const rnfFnBtn = document.getElementById('rndfn-btn');
        const rnfVlBtn = document.getElementById('rndfn-val');
        const omoshiroi = 0;
        

        /*
        // Example usage:
        const blueToRed = generateQuantizedGradient('#0000ff', '#ff0000', 5);
        console.log(blueToRed);
        // Output: ['#0000ff', '#3f00bf', '#7f007f', '#bf003f', '#ff0000']

        const greenToYellow = generateQuantizedGradient('#00ff00', '#ffff00', 3);
        console.log(greenToYellow);
        // Output: ['#00ff00', '#7fff00', '#ffff00']
        */

        param1Input.addEventListener('input', updatePattern);
        param2Input.addEventListener('input', updatePattern);
        param3Input.addEventListener('input', updatePattern);
        modfunInput.addEventListener('input', updatePattern);
        invertInput.addEventListener('click', invertVal);
        integerInput.addEventListener('click', integerVal);
        ditheringInput.addEventListener('click', ditheringVal);
        floydsteinInput.addEventListener('click', floydsteinVal);        
        updateBtn.addEventListener('click', updatePattern);
        omoshiroiBtn.addEventListener('click',  omoshiroiSelect);
        grayscaleBtn.addEventListener('click',  grayscaleSelect);
        saveBtn.addEventListener('click', saveImage);
        save4xBtn.addEventListener('click', saveImage4X);
        rotate90Btn.addEventListener('click', rotate90CCW);
        rnfFnBtn.addEventListener('click', selectRandomFunction);
        rnfVlBtn.addEventListener('click', randomizeValues);

        updatePattern();
    </script>
</body>
</html>